### 解题思路
观察任意firstlist和secondlisd的任意两个数组[s1, e1]和[s2, e2],
只会存在以下两种情形
1. 有相交区域
2. 无相交区域

情形一：
![image.png](https://pic.leetcode-cn.com/1621402660-xagAbe-image.png)
一共有如上四种可能，对于普适情况，相交区间为(max(s1, s2)，min(e1, e2))，推广到临界情况依然适用。
情形二：
![image.png](https://pic.leetcode-cn.com/1621402777-ilMzss-image.png)
e2 < s1，secondlist前进
e1 < s2, firstlist前进

### 代码

```java
class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        int p1 = 0, p2 = 0;
        int n1 = firstList.length, n2 = secondList.length;
        List<int[]> ans = new ArrayList<>();
        while(p1 < n1 && p2 < n2){
            int s1 = firstList[p1][0], e1 = firstList[p1][1];
            int s2 = secondList[p2][0], e2 = secondList[p2][1];
            int s = s1 > s2 ? s1 : s2;
            int e = e1 < e2 ? e1 : e2;
            if(s <= e){
                ans.add(new int[]{s, e});
            }
            if(e1 > e2){
                p2++;
            }
            else{
                p1++;
            }
        }
        return ans.toArray(new int[ans.size()][]);
    }
}
```
### 复杂度分析
- T:O(min(n, m))
- S:O(1)
